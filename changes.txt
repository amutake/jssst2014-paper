照会事項に対する回答書
======================

論文番号: 14-048
論文題目: Aπ計算のCoqによる形式化

お忙しい中大変貴重なご意見、ご指摘ありがとうございました。
頂きました照会事項について、下記の通り回答いたします。

※回答の定義番号、節番号は、修正後のものです。


査読者A先生
-----------

【コメント】
1. P1 「他の並行計算モデル，例えば π 計算などと比較すると，アクターモデルは実装しやすく，またプログラミングも比較的容易であると考えられる．」←特に根拠もないので不要だと思います。
-> 1節: 「アクターモデルは実装しやすく，またプログラミングも比較的容易であると考えられる」という文を削除しました。

2. P2. 図2のAπ計算の配置の文法ですが、Identifier の構文が間違っています。Agha らの論文に従ってください。
-> 3.2節: 振る舞いの雛形からアクターを作る構文を[Agha04]に合わせました。

3. p2. 同じくIdentifier でなぜ¥tilde{u} と¥tilder{v}が区別されているかを説明してください。またそれらは何でしょうか？
-> 3.2節: Aπ計算の構文についての説明を追加し、その中で説明を追加しました。

4. p4. 「仮名関数の入力と返り値の関係は，以下のような意味を持つ．」→「仮名関数は以下の通り定義される。」直前の改行も不要です。
-> 3.3.1節: 修正しました

5. p5. （定義3.3） 「x ¥not ¥in ρ 1 かつ f 1 (x) ¥models ¥botom ，または x ¥in ρ 1 かつ x ¥not ¥in ρ 2 のとき」と「その他」の場合ですが、その他は前者の否定型、つまり、「¥not (x ¥not ¥in ρ 1 かつ f 1 (x) ¥models ¥botom ，または x ¥in ρ 1 かつ x ¥not ¥in ρ 2)のとき」になりますが、少し変に感じました。Agha の論文でも同じになっているのを確認していますが、もう一度確認してみてください。
-> 確かめましたが間違ってはいないようです。\oplus は一部の仮名関数に対してしか可換にならない点が変に感じる部分かと思います。

6. p5. （定義3.4） 「f(x) ¥in ¥rho のとき」ですが、「定義域を制限」というよりも、「値域を制限」しているように見えます。
-> 定義3.6: 仮名関数の定義域の制限 -> 仮名関数の値域の制限にしました

7. p5. f*が定義されずに使われています。
-> 定義3.3: f* の定義を追加しました

8. p5. 「仮の名前のアクター」→「仮名のアクター」　#用語を揃えてください。
-> 3.3.3節: 仮名のアクターに修正しました。

9. p6. 「，この型システムを満たした Aπ 計算の配置はアクターモデルとしての振る舞いを示す」ですが、本論文で示したのはあくまで、Aπのプロセスが与えられた型を満たすことを示したのみで、アクターモデルとしての振る舞いを示すことまでは言えていないと思います。これを言うには、Aghaの論文[3]のTheorem 2.が必要です。
-> 5節: Aπ計算がアクターとしての振る舞いを持つことは型保存性を証明しなければいけないことを追記しました

10. p5. 「を想定している，」→「を想定している．」
-> 4.1節: 修正しました。

11. p8. 図6 「¥rho-{x};f ¥mid x |- (¥nu x) P」→「¥rho-{x};f ¥mid ¥rho-{x} |- (¥nu x) P」
-> 図6: 修正しました

12. p8. 「Aπ 計算の型システムが確かにアクターとしての振る舞いを強制することを示した．」→上記コメント9に同じ
-> 5節: Aπ計算がアクターとしての振る舞いを持つことは型保存性を証明しなければいけないことを追記しました

13. p5. 図3　「(ACT) ch(<x> ¥tilde{+} <¥hat z>)」→<>の括弧と¥tilde{+}は何を意味しますか？
-> 3.1節: これらの記号の定義を追加しました

14. p2. 「配置内の，配置外からのメッセージを受け取ることのできるアクターを，窓口 (receptionist) という」→「配置外からのメッセージを受け取ることのできる（配置内の）アクターを窓口 (receptionist) という」
-> 2.1.1節: 修正しました

15. p2. 「送れるようになる，」→「送れるようになる．」
-> 2.1.1節: 修正しました。

16. P6 定義 4.5 ( 仮名関数の定義域の制限 ) 「f | x : ¥rho - x」-> 「f | x : ¥rho - {x}」
-> 定義4.5: 修正しました。

【照会事項】
㈰ 4.1.1節：「また，仮名関数の定義域の制限を行う二項演算子 (|) の第二引数は要素が1 個の場合しかなく，」→なぜ1個の場合しかないのでしょうか？
-> 要素が1個の場合しかないのではなく、元の定義域・値域から1つ要素を取り除くような場合しかない、の間違いでした。4.1.1節に説明を追加しました。

㈪4.2 型付け規則：4.2.1節の「Act規則の分割」では、「Agha の型システムのAct規則はCoqでの実装が難しいので4つに分けた」の意の記述がありますが、それが具体的になぜ難しいのかや、なぜ4つに分けるのかを説明してください。
-> 4.2.1節に説明を追加しました。

㈫4.2.2節では補題の証明を書いてください。
-> 補題4.1下に証明を追加しました。

㈬p5. 図3　「(ACT) ch(<x> ¥tilde{+} <¥hat z>)」→<>の括弧と¥tilde{+}は何を意味しますか？
-> 3.1節: これらの記号の定義を追加しました

㈭p2. 図2のAπ計算の配置の文法ですが、Identifier でなぜ¥tilde{u} と¥tilder{v}が区別されているかを説明してください。またそれらは何でしょうか？
-> 3.2節: Aπ計算の構文についての説明を追加し、その中で説明を追加しました。

㈮図３について、Aghaらの論文[3]を参照しなくても、これらの規則が理解できるように記述してください。
-> 3.4節に説明を追加しました

㈯図5-7についても、Aghaらの論文[3]と同等の詳細度で説明をしてください。
-> それぞれ4.2.1節、4.2.2節、4.2.3節、4.2.4節に説明を追加しました。


査読者B先生
-----------

１．本論文で示された結果の意義が明確に述べられていない。Coqで検証された
Aπ計算の「健全性」は、単に「Aπ計算のプロセスはアクターであること」しか述
べておらず、それが表現するアクターが何か有用な性質を持つのかどうかについ
て何ら保証しない。本論文のゴールは「アクターモデルによって構成されたシス
テムの形式的検証」であるが、本論文の結果はアクターの形式的検証に直接的に
適用できるものではない。（一方で、Aπ計算はフルのπ計算と比べてどのような形
式的検証が可能であるのか別途検討する余地はあるが、本論文には言及がない。）
結論として、本論文は何を達成したのか明確でなく、その貢献を評価するのは難
しい。
-> おっしゃるとおりアクターの形式的検証には直接用いることはできず、さらに
アクターの性質を記述するための構文などが必要になります。
5節にアクターの形式検証に応用する際の課題と展望について追記しました。

２．monadic な Aπ計算を検証対象にする理由が十分に検討されていない。本論文
が取り組む問題の大半はAπ計算の「仮の名前」に由来している。仮の名前は、ア
クターモデルにおいて名前のタプルを送受信できる（polyadicな）機構を、タプ
ルを送受信できない（monadicな）Aπ計算でエンコードするために用いられる。こ
のため、タプルを送受信できるようにAπ計算を拡張すれば、仮の名前は不要であ
り、型システムはかなり単純になるであろう。そのようなπ計算のpolyadicな拡張
は、λ計算をタプルで拡張するのと同様に、理論的な取り扱いが平易な、非常によ
くある拡張であり、採用しない理由が見いだしづらい。アクターのどういった特
徴を扱うためにmonadicなAπ計算によるエンコードを対象とするのか不明であり、
本論文の問題設定が適切でないように感じられる。
-> 本研究では Aπ計算の形式化という目的もあるので、polyadic なものを用いず、
Aπ計算と同じ機構になるようにしています。このことを1節の最後に追記しました。


３．検証の範囲が不十分である。型システムは一般に、計算の進行にかかわらず
不変な性質を保証することではじめて有用性をもつ。しかしながら、本論文では
型保存性が検証されておらず、型付けされたAπ計算プロセスの振舞いがアクター
の振舞いを逸脱する余地について機械的には検証されていない。型システムを機
械検証するひとつの意義は型保存性にあるといってよく、本論文の達成度を大き
く損なっている。
-> 型保存性についてはいまだ証明できていません。なので、5節に型保存性について
さらに追記しました。

アクターの名前の一意性・新鮮性は、アクターの一般的な性質のように述べられ
ているが、Aπ計算からのエンコードを採用した場合に固有の制限ではないか？ そ
うだとすれば、それを検証する意義とは何であろうか？
-> 一意性・新鮮性はアクターの一般的な性質です。これらはアクターの名前に関する
性質であり、これらがないとアクターとしての一貫性が崩れてしまいます。
このことを2.1.2節に追加しました。

Aπ計算は本当にアクターなのだろうか。少なくとも、Aπ計算の項が表すアクター
の永続性は直接的には検証されていない（Coqで検証された定理3.1では言及され
ていない）。本論文の主旨に鑑みれば、Aπ計算がどの程度までアクターの性質を
満たしているのか、再検討すべきである。
-> Aπ計算では、メッセージを受け取って何らかの処理をしたあと空になるような
アクターは、メッセージを受け取っても何もしないアクターになります。これに
よって永続性は満たされます。3.4節のAct規則の説明と、4.2.1節のAct-empty規則
の説明の中に追記しました。

本論文は self-contained でなく、全般的に抽象的な説明に終始し、モデルが表
す計算現象を把握しづらい。Aπ計算で書かれたアクターとはどのようなものか、
仮名関数 f がどのように仮の名前を追跡するのか、2,3の例を提示すべきである。
π計算に触れたことのない読者にとっては、「仮の名前をとる」「仮の名前をとっ
たときには必ず元の名前に戻る」とは何であるか、本論文のみで理解するのは極
めて困難であろう。
-> 例は提示できていませんが、Aπ計算の構文についての説明、型付け規則の
説明のなかで、どのような動きになるのか説明を追加しました。

p.4, 3.2.3節:
・関数 f に対する演算 f* の定義がない。
-> 定義3.3: f* の定義を追加しました

p.5, 図3:
・+の上にチルダ記号がついた演算子の定義がない。　また、[3] の定
　義ではこの演算子が使われていない。
・INST規則が [3] と異なる。
-> 3.1節で演算子の説明を追加しました。
Inst 規則を[Agha04]に合わせました。

p.6, 4.1節:
・star 型の定義がない。
-> 4.1節: star 型の説明を追加しました。



[Agha04]Agha, G. and Thati, P.: An Algebraic Theory of Actors and Its Application to a Simple Object Based Language, From Object-Orientation to Formal Methods, Lecture Notes in Computer Science, Vol. 2635, Springer-Verlag, 2004, pp. 26–57.


以上、回答書となります。
よろしくお願いいたします。
